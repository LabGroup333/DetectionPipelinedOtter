`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 04/29/2025 04:52:21 PM
// Design Name: 
// Module Name: OTTER_MCU
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module OTTER_MCU(
    input CLK,
    input RST
    );
    logic [31:0] pc, nextPC; // wire from PC to Memory for instruction grabbing
    logic [31:0] ir;
    logic [31:0] alu_srcA_D1;
    logic [31:0] alu_srcB_D1, alu_srcB_D2, imm_B, imm_I, targetPC_D;
    logic alu_srcA_sel;
    logic [1:0] alu_srcB_sel;
    logic [31:0] rs1_wire, rs2_wire;
    logic zero_E;
    logic [31:0] alu_result_wire;
    logic [31:0] data;
    logic [31:0] wdata;
    logic reg_write, mem_write, mem_rd2;
    logic PCoffset_sel;
    logic jump_flag, take_branch;
    logic [1:0] forwardA, forwardB;
    logic flush, stall;

    
    
    typedef struct packed {
        logic [31:0] IR;
        logic [31:0] nextPC, PC;
        logic RegWrite, MemWrite, MemRead2;
        logic Jump, Branch;
        logic [1:0] RF_Sel, ImmSrc;
        logic [3:0] ALUControl;
        logic [31:0]SrcA_Out, SrcB_Out;
        logic [31:0] R1Data, R2Data;
        logic [4:0] RdD;
        logic [31:0] MemData;
        logic [31:0] ALUResult; 
        logic [31:0] targetPC_D;  
    } pipeline_reg_t;
    
    pipeline_reg_t FD, DE, EM, MW;
    
    
    REG_FILE OTTER_REG_FILE(
        .CLK(CLK),
        .EN(MW.RegWrite),
        .ADR1(FD.IR[19:15]),
        .ADR2(FD.IR[24:20]),
        .WA(MW.RdD),    //micah-changed from EM to MW
        .WD(wdata),
        .RS1(rs1_wire),
        .RS2(rs2_wire)
    ); 
    
    OTTER_mem_dualport OTTER_MEM(
        .MEM_ADDR1(pc),     //Instruction Memory Port
        .MEM_ADDR2(EM.ALUResult),     //Data Memory Port
        .MEM_CLK(CLK),
        .MEM_DIN2(EM.R2Data),                                   //old???????????????
        .MEM_WRITE2(EM.MemWrite),
        .MEM_READ1(1'b1),
        .MEM_READ2(EM.MemRead2),
        //input [1:0] MEM_BYTE_EN1;
        //input [1:0] MEM_BYTE_EN2;
        .IO_IN(32'b0),
        .ERR(),
        //.MEM_SIZE(),
        //.MEM_SIGN(),
        .MEM_DOUT1(ir),
        .MEM_DOUT2(MW.MemData),
        .IO_WR()
    );
    

////////////////////////////////////////////////////////////////
// FETCH Stage Hardware
    PC OTTER_PC(
        .CLK(CLK),
        .RST(RST),
        .PC_WRITE(~stall), // Should always be on         ////////DEPENDENT ON STALL
        .PC_SOURCE(3'd0),    // PC MUX SEL
        .JALR(32'd0),       
        .JAL(32'd0),
        .BRANCH(32'd0),
        .MTVEC(32'd0),        // I.S.R. address
        .MEPC(32'd0),         // I.S.R. return address
        .PC_OUT(pc),
        .PC_OUT_INC(nextPC)
     );
     
     
     Branch_Predictor(
    .rst(RST),
    .IR_D(DE.IR), 
    .take_branch(take_branch),   
    .PCsel(PCsel)
    );
    
    
    
    
////////////////////////////////////////////////////////////////////
// Decode Stage Hardware
   IG IMMED_GEN(
        .IR(FD.IR[31:7]),
        .U_TYPE(alu_srcA_D1),
        .I_TYPE(alu_srcB_D1),
        .S_TYPE(alu_srcB_D2),
        .B_TYPE(imm_B),
        .J_TYPE()
    ); 
    
   CTRL_UNIT OTTER_CU(
        // INPUTS
        .OPCODE(FD.IR[6:0]),
        .FUNC3(FD.IR[14:12]),
        .FUNC7(FD.IR[30]),
        
        // OUTPUTS
        .REG_WRITE(reg_write),
        .MEM_WRITE(mem_write),
        .MEM_READ2(mem_rd2),
        //.JUMP(jump_D),
        //.BRANCH(branch_D),
        .RF_SEL(DE.RF_Sel),
        .ALU_FUN(DE.ALUControl),
        .ALU_SRCA(alu_srcA_sel),
        .ALU_SRCB(alu_srcB_sel),
        .jump_flag(jump_flag),    //initialize
        .PCoffset_sel(PCoffset_sel)
   ); 
   
   
///////////////////////////////forwarding decode   
    FourMux ALU_ForwardD1(
        .SEL(forwardA),
        .ZERO(rs1_wire),
        .ONE(alu_result_wire),
        .TWO(MW.RdD),
        .OUT(fwd_rs1data_D)     ////propagate this to exicute
    );
    
    FourMux ALU_ForwardD2(
        .SEL(forwardB),
        .ZERO(rs2_wire),
        .ONE(alu_result_wire),
        .TWO(MW.RdD),
        .OUT(fwd_rs2data_D)     ////propagate this to exicute
    );
///////////////////////////////////   
   
   
   
////////////////////////////////forwarding exicute   
       TwoMux ALU_ForwardE1(
        .SEL(forwardA),         //forwardA from forwarding unit
        .ZERO(DE.fwd_rs1data_D),
        .ONE(MW.RdD),
        .OUT(fwd_rs1data_E) 
    );
    
    
    TwoMux ALU_ForwardE2(
        .SEL(forwardB),         //forwardB from forwarding unit
        .ZERO(DE.fwd_rs2data_D),
        .ONE(MW.RdD),
        .OUT(fwd_rs2data_E)
    );
/////////////////////////////////    
    
    
       // 2T1 MUX
    TwoMux ALU_Src_A(
        .SEL(alu_srcA_sel),
        .ZERO(fwd_rs1data_E),
        .ONE(alu_srcA_D1),
        .OUT(DE.SrcA_Out)
    ); 



    // 4T1 MUX
    FourMux ALU_Src_B(
        .SEL(alu_srcB_sel),
        .ZERO(fwd_rs2data_E),
        .ONE(alu_srcB_D1),
        .TWO(alu_srcB_D2),
        .THREE(FD.PC),
        .OUT(DE.SrcB_Out)
    ); 
    
   
    
    
    Target_PC_Generator TPC(
        .PCoffset_sel(PCoffset_sel),
        .imm_I(imm_I),
        .imm_B(imm_B),
        .fwd_rs1data_D(fwd_rs1data_D), 
        .PC_D(DE.PC),
        .targetPC_D(DE.targetPC_D)
    );
    
    
//////////////////////////////////////////////////////////////////
// Execute Stage Hardware
 
 
 
    
    ALU OTTER_ALU(
    .SRC_A(DE.SrcA_Out),
    .SRC_B(DE.SrcB_Out),
    .ALU_CTRL(DE.ALUControl),
    .RESULT(alu_result_wire),
    .ZERO(zero_E)
    );
    
    // BCG 
    Branch_Condition_Generator BCG(
    .RS1_E(fwd_rs1data_E),
    .RS2_E(fwd_rs2data_E),
    .IR_E(DE.IR),
    .take_branch(take_branch) //initialize
    );
    
    
    
    // BAG 
//////////////////////////////////////////////////////////////////
// EX/MEM Pipeline Registers
  /*  logic RegWrite_EM, MemWrite_EM;
    logic [1:0] ResultSrc_EM;
    logic [31:0] WData_EM;
    logic [31:0] ALUResult_EM;
    logic zero_EM;
    logic [4:0] RdD_EM;
    logic [31:0] nextPC_EM; */
//////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////
// Memory Stage 

    
////////////////////////////////////////////////////////////////////
// MEM/WB Pipeline Register
  /*  logic RegWrite_MW;
    logic [1:0] ResultSrc_MW;
    logic [31:0] ALUResult_MW;
    logic [4:0] RdD_MW;
    logic [31:0] Reg_Data_MW;
    logic [31:0] nextPC_MW; */
    
////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////
// Writeback Stage

    FourMux REG_FILE_MUX(
        .SEL(MW.RF_Sel),
        .ZERO(MW.nextPC),
        .ONE(32'd0),
        .TWO(MW.MemData),
        .THREE(MW.ALUResult),
        .OUT(wdata)
    ); 
// Reg F
   
   
   
  FORWARDING_UNIT FU(
    .rs1_D(R1data), 
    .rs2_D(R2data),
    .rd_E(DE.RdD), 
    .rd_M(EM.RdD),
    .regWrite_E(DE.RegWrite), 
    .regWrite_M(EM.RegWrite),
    .forwardA(forwardA), 
    .forwardB(forwardB)
    );

Hazard_Detection_Unit HDU (
    .PC_D(FD.PC),
    .nextPC_E(DE.nextPC),
    .targetPC_E(EM.targetPC_D),
    .isr_D(FD.IR),
    .isr_E(DE.IR),
    .isr_M(EM.IR),
    .PCsource(3'b0),                         //predicts not taken
    .RDwrite_E(DE.RegWrite),
    .RDwrite_M(EM.RegWrite),
    .take_branch(take_branch),                
    .MEMread2(DE.MemRead2),
    .flush(flush),
    .stall(stall)
);
   
///////////////////////////////////////////////////////////////////
// Engine 
always_ff @(posedge CLK or posedge RST) begin
    if (RST) begin
        FD.IR <= 32'b0;
        FD.PC <= 32'b0;
        FD.nextPC <= 32'b0;
    end else if (flush) begin
        FD.IR <= 8'h00000013;
        FD.PC <= pc;
        FD.nextPC <= nextPC;
    end else begin
        FD.IR <= ir;
        FD.PC <= pc;
        FD.nextPC <= nextPC;
    end
end
// Update IF/ID Pipeline Reg
always_ff@(negedge CLK) begin
    if(RST) begin
        DE.PC <= 'b0;
        DE.nextPC <= 'b0;
        DE.IR <= 'b0;
        DE.R1Data <= 'b0;
        DE.R2Data <= 'b0;
        DE.RdD <= 'b0;
    end else if (flush) begin
    
        DE.PC <= FD.PC;
        DE.nextPC <= FD.nextPC;
        DE.IR <= 0;
        DE.R1Data <= 0;
        DE.R2Data <= 0;
        DE.RdD <= 0;
        DE.MemRead2 <= 0;
        DE.MemWrite <= 0;
        DE.RegWrite <= 0;
        DE.fwd_rs1data_D <= 0; 
        DE.fwd_rs2data_D <= 0;
        
    end else if (stall) begin
    
        DE.PC <= FD.PC;
        DE.nextPC <= FD.nextPC;
        DE.IR <= 0;
        DE.R1Data <= 0;
        DE.R2Data <= 0;
        DE.RdD <= 0;
        DE.MemRead2 <= 0;
        DE.MemWrite <= 0;
        DE.RegWrite <= 0;
        DE.fwd_rs1data_D <= 0; 
        DE.fwd_rs2data_D <= 0;
    
    end else begin
        DE.PC <= FD.PC;
        DE.nextPC <= FD.nextPC;
        DE.IR <= FD.IR;
        DE.R1Data <= rs1_wire;
        DE.R2Data <= rs2_wire;
        DE.RdD <= FD.IR[11:7];
        DE.MemRead2 <= mem_rd2;
        DE.MemWrite <= mem_write;
        DE.RegWrite <= reg_write;
        DE.fwd_rs1data_D <= fwd_rs1data_D;    ///added
        DE.fwd_rs2data_D <= fwd_rs2data_D;
    end
end


always_ff@(posedge CLK) begin
    if(RST) begin
        EM.RegWrite <= 'b0;
        EM.MemWrite <= 'b0;
        EM.MemRead2 <= 'b0;
        //DE.Jump <= 'b0;
        //DE.Branch <= 'b0;
        EM.RF_Sel <= 'b0;
        EM.ALUControl <= 'b0;
        EM.R1Data <= 'b0;
        EM.R2Data <= 'b0;
        EM.PC <= 'b0;
        EM.nextPC <= 'b0;
        EM.RdD <= 'b0;
        EM.SrcA_Out <= 'b0;
        EM.SrcB_Out <= 'b0;
        EM.ALUResult <= 'b0;
    end else begin
        EM.RegWrite <= DE.RegWrite;
        EM.MemWrite <= DE.MemWrite;
        EM.MemRead2 <= DE.MemRead2;
        //DE.Jump <= jump_D;
        //DE.Branch <=
        EM.RF_Sel <= DE.RF_Sel;
        EM.ALUControl <= DE.ALUControl;
        EM.R1Data <= DE.R1Data;
        EM.R2Data <= DE.R2Data;
        EM.PC <= DE.PC;
        EM.nextPC <= DE.nextPC;
        EM.RdD <= DE.RdD;
        EM.SrcA_Out <= DE.SrcA_Out;
        EM.SrcB_Out <= DE.SrcB_Out;
        EM.ALUResult <= alu_result_wire;
        EM.targetPC_D <= DE.targetPC_D; //new
    end
end 


// Update ME/WB Pipeline Reg
always_ff@(posedge CLK) begin // was negedge
    if(RST) begin
        MW.RegWrite <= 'b0;
        MW.RF_Sel <= 'b0;
        MW.ALUResult <= 'b0;
        MW.RdD <= 'b0;
        MW.nextPC <= 'b0;
    end
    else begin
        MW.RegWrite <= EM.RegWrite;
        MW.RF_Sel <= EM.RF_Sel;
        MW.ALUResult <= EM.ALUResult;
        MW.RdD <= EM.RdD;
        MW.nextPC <= EM.nextPC;
      //  MW.MemData <= data; // will maybe need for mem_dout2 so we should uncomment maybe
    end
end 


// struct is just a type, use it where you want
// its an interface

endmodule
